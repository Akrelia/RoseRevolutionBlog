---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";
import MainCard from "@/components/MainCard.astro";
import GitHubStats from "@/components/mdx/GitHubStats.astro";
---

<BaseLayout title="About">
  <MainCard image="/RoseRevolutionBlog/image/cover-about.png" title="About Rose Revolution" textOverlay="ABOUT" infoIcon="lucide:user">
    <div class="space-y-10 mb-8">
      <!-- Profile Section -->
      <section class="flex flex-col md:flex-row gap-8 items-center md:items-start">
        <div class="flex-1 text-center md:text-left">
          <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
            <Icon name="lucide:scroll-text" class="w-6 h-6 text-primary" />
            <span>History</span>
          </h2>
          <p class="text-base-content/80">
            <b>Rose Revolution</b> is a project that was launched at the end of 2024 following a discussion with another team member. We were talking about adding features never seen before, and how it could be done easily since we both had development
            experience around Rose. <br /><br />However, we weren’t keen on working with the official source code that was around, since it's an old codebase written in legacy C++, a long time ago. That’s when the idea came up: what if we rebuilt
            everything from scratch? But rebuilding an entire MMORPG from the ground up (not counting assets) is a massive task.<br /><br /> Luckily, during the COVID lockdown, I had written my own Rose Online emulator in C#, so that already gave us a
            solid foundation for the server. Then I remembered that some osRose developers had started porting Rose Online to <b>Unity</b>. The project was quite old, though, and didn’t work at all on recent versions of the engine but they did a lot
            of work already (in fact : all assets importation & creation). But we thought: "If there's any chance we can start from that base, it would save us a lot of work." And voilà ! After days of fixing issues and converting what needed to be
            converted, it worked.
          </p>
        </div>
      </section>

      <section class="flex flex-col md:flex-row gap-8 items-center md:items-start">
        <div class="flex-1 text-center md:text-left">
          <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
            <Icon name="lucide:target" class="w-6 h-6 text-primary" />
            <span>Goal</span>
          </h2>
          <p class="text-base-content/80">
            The goal of this project is to provide the community with a fully rewritten, modern client and server for <b>Rose Online</b> — along with better tools. Our main ambition is to deliver a solid foundation that other developers can build on to
            transform Rose into an entirely different game, if they wish to !
          </p>
        </div>
      </section>

      <!-- Tech Stack -->
      <section>
        <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
          <Icon name="lucide:code-2" class="w-6 h-6 text-primary" />
          <span>Technologies</span>
        </h2>

        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
          {
            [
              { name: "Unity", icon: "simple-icons:unity", color: "oklch(0.5 0.2 300)" },
              { name: "C#", icon: "simple-icons:csharp", color: "oklch(0.6 0.2 160)" },
              { name: "JSON", icon: "simple-icons:json", color: "oklch(0.8 0.2 80)" },
              { name: "Git", icon: "simple-icons:git", color: "oklch(0.7 0.2 30)" },
            ].map((tech) => (
              <div class="flex flex-col items-center justify-center p-4 bg-base-200 rounded-lg hover:bg-base-300 transition-colors">
                <div class="text-3xl mb-2" style={`color: ${tech.color}`}>
                  <Icon name={tech.icon} class="w-10 h-10" />
                </div>
                <span class="text-sm font-medium">{tech.name}</span>
              </div>
            ))
          }
        </div>
      </section>
    </div>
  </MainCard>
</BaseLayout>
